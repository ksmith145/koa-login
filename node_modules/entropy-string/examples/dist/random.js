'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CharSet = require('./charSet').default;

var _require = require('./charSet'),
    charSet32 = _require.charSet32;

var Crypto = require('crypto');
var WeakMap = require('weak-map');

var propMap = new WeakMap();

var BITS_PER_BYTE = 8;

var endianByteNum = function () {
  var buf32 = new Uint32Array(1);
  var buf8 = new Uint8Array(buf32.buffer);
  buf32[0] = 0xff;
  return buf8[0] === 0xff ? [2, 3, 4, 5, 6, 7] : [0, 1, 2, 3, 6, 7];
}();

var _stringWithBytes = function _stringWithBytes(entropyBits, bytes, charSet) {
  if (entropyBits <= 0) {
    return '';
  }

  var bitsPerChar = charSet.getBitsPerChar();
  var count = Math.ceil(entropyBits / bitsPerChar);
  if (count <= 0) {
    return '';
  }

  var need = Math.ceil(count * (bitsPerChar / BITS_PER_BYTE));
  if (bytes.length < need) {
    throw new Error('Insufficient bytes: need ' + need + ' and got ' + bytes.length);
  }

  var charsPerChunk = charSet.getCharsPerChunk();
  var chunks = Math.floor(count / charsPerChunk);
  var partials = count % charsPerChunk;

  var ndxFn = charSet.getNdxFn();
  var chars = charSet.getChars();

  var string = '';
  for (var chunk = 0; chunk < chunks; chunk += 1) {
    for (var slice = 0; slice < charsPerChunk; slice += 1) {
      var ndx = ndxFn(chunk, slice, bytes);
      string += chars[ndx];
    }
  }
  for (var _slice = 0; _slice < partials; _slice += 1) {
    var _ndx = ndxFn(chunks, _slice, bytes);
    string += chars[_ndx];
  }
  return string;
};

var cryptoBytes = function cryptoBytes(count) {
  return Buffer.from(Crypto.randomBytes(count));
};

var randomBytes = function randomBytes(count) {
  var BYTES_USED_PER_RANDOM_CALL = 6;
  var randCount = Math.ceil(count / BYTES_USED_PER_RANDOM_CALL);

  var buffer = Buffer.alloc(count);
  var dataView = new DataView(new ArrayBuffer(BITS_PER_BYTE));
  for (var rNum = 0; rNum < randCount; rNum += 1) {
    dataView.setFloat64(0, Math.random());
    for (var n = 0; n < BYTES_USED_PER_RANDOM_CALL; n += 1) {
      var fByteNum = endianByteNum[n];
      var bByteNum = rNum * BYTES_USED_PER_RANDOM_CALL + n;
      if (bByteNum < count) {
        buffer[bByteNum] = dataView.getUint8(fByteNum);
      }
    }
  }
  return buffer;
};

var _class = function () {
  function _class(arg) {
    (0, _classCallCheck3.default)(this, _class);

    var charSet = void 0;
    if (arg === undefined) {
      charSet = charSet32;
    } else if (arg instanceof CharSet) {
      charSet = arg;
    } else if (typeof arg === 'string' || arg instanceof String) {
      charSet = new CharSet(arg);
    } else {
      throw new Error('Invalid arg: must be either valid CharSet or valid chars');
    }
    var hideProps = {
      charSet: charSet
    };
    propMap.set(this, hideProps);
  }

  (0, _createClass3.default)(_class, [{
    key: 'smallID',
    value: function smallID() {
      var charSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : propMap.get(this).charSet;

      return this.string(29, charSet);
    }
  }, {
    key: 'mediumID',
    value: function mediumID() {
      var charSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : propMap.get(this).charSet;

      return this.string(69, charSet);
    }
  }, {
    key: 'largeID',
    value: function largeID() {
      var charSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : propMap.get(this).charSet;

      return this.string(99, charSet);
    }
  }, {
    key: 'sessionID',
    value: function sessionID() {
      var charSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : propMap.get(this).charSet;

      return this.string(128, charSet);
    }
  }, {
    key: 'token',
    value: function token() {
      var charSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : propMap.get(this).charSet;

      return this.string(256, charSet);
    }
  }, {
    key: 'string',
    value: function string(entropyBits) {
      var charSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : propMap.get(this).charSet;

      var bytesNeeded = charSet.bytesNeeded(entropyBits);
      return this.stringWithBytes(entropyBits, cryptoBytes(bytesNeeded), charSet);
    }
  }, {
    key: 'stringRandom',
    value: function stringRandom(entropyBits) {
      var charSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : propMap.get(this).charSet;

      var bytesNeeded = charSet.bytesNeeded(entropyBits);
      return this.stringWithBytes(entropyBits, randomBytes(bytesNeeded), charSet);
    }
  }, {
    key: 'stringWithBytes',
    value: function stringWithBytes(entropyBits, bytes) {
      var charSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : propMap.get(this).charSet;

      return _stringWithBytes(entropyBits, bytes, charSet);
    }
  }, {
    key: 'bytesNeeded',
    value: function bytesNeeded(entropyBits) {
      var charSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : propMap.get(this).charSet;

      return charSet.bytesNeeded(entropyBits);
    }
  }, {
    key: 'chars',
    value: function chars() {
      return propMap.get(this).charSet.chars();
    }
  }, {
    key: 'use',
    value: function use(charSet) {
      if (!(charSet instanceof CharSet)) {
        throw new Error('Invalid CharSet');
      }
      propMap.get(this).charSet = charSet;
    }
  }, {
    key: 'useChars',
    value: function useChars(chars) {
      if (!(typeof chars === 'string' || chars instanceof String)) {
        throw new Error('Invalid chars: Must be string');
      }
      this.use(new CharSet(chars));
    }
  }]);
  return _class;
}();

exports.default = _class;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3JhbmRvbS5qcyJdLCJuYW1lcyI6WyJDaGFyU2V0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJjaGFyU2V0MzIiLCJDcnlwdG8iLCJXZWFrTWFwIiwicHJvcE1hcCIsIkJJVFNfUEVSX0JZVEUiLCJlbmRpYW5CeXRlTnVtIiwiYnVmMzIiLCJVaW50MzJBcnJheSIsImJ1ZjgiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwic3RyaW5nV2l0aEJ5dGVzIiwiZW50cm9weUJpdHMiLCJieXRlcyIsImNoYXJTZXQiLCJiaXRzUGVyQ2hhciIsImdldEJpdHNQZXJDaGFyIiwiY291bnQiLCJNYXRoIiwiY2VpbCIsIm5lZWQiLCJsZW5ndGgiLCJFcnJvciIsImNoYXJzUGVyQ2h1bmsiLCJnZXRDaGFyc1BlckNodW5rIiwiY2h1bmtzIiwiZmxvb3IiLCJwYXJ0aWFscyIsIm5keEZuIiwiZ2V0TmR4Rm4iLCJjaGFycyIsImdldENoYXJzIiwic3RyaW5nIiwiY2h1bmsiLCJzbGljZSIsIm5keCIsImNyeXB0b0J5dGVzIiwiQnVmZmVyIiwiZnJvbSIsInJhbmRvbUJ5dGVzIiwiQllURVNfVVNFRF9QRVJfUkFORE9NX0NBTEwiLCJyYW5kQ291bnQiLCJhbGxvYyIsImRhdGFWaWV3IiwiRGF0YVZpZXciLCJBcnJheUJ1ZmZlciIsInJOdW0iLCJzZXRGbG9hdDY0IiwicmFuZG9tIiwibiIsImZCeXRlTnVtIiwiYkJ5dGVOdW0iLCJnZXRVaW50OCIsImFyZyIsInVuZGVmaW5lZCIsIlN0cmluZyIsImhpZGVQcm9wcyIsInNldCIsImdldCIsImJ5dGVzTmVlZGVkIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsVUFBVUMsUUFBUSxXQUFSLEVBQXFCQyxPQUFyQzs7ZUFDc0JELFFBQVEsV0FBUixDO0lBQWRFLFMsWUFBQUEsUzs7QUFFUixJQUFNQyxTQUFTSCxRQUFRLFFBQVIsQ0FBZjtBQUNBLElBQU1JLFVBQVVKLFFBQVEsVUFBUixDQUFoQjs7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QW9CL0MsV0FBcEIsQ0FBcEI7QUFDQSxhQUFPLEtBQUtELGVBQUwsQ0FBcUJDLFdBQXJCLEVBQWtDMkIsWUFBWW9CLFdBQVosQ0FBbEMsRUFBNEQ3QyxPQUE1RCxDQUFQO0FBQ0Q7OztvQ0FFZUYsVyxFQUFhQyxLLEVBQTRDO0FBQUEsVUFBckNDLE9BQXFDLHVFQUEzQlgsUUFBUXVELEdBQVIsQ0FBWSxJQUFaLEVBQWtCNUMsT0FBUzs7QUFDdkUsYUFBT0gsaUJBQWdCQyxXQUFoQixFQUE2QkMsS0FBN0IsRUFBb0NDLE9BQXBDLENBQVA7QUFDRDs7O2dDQUVXRixXLEVBQWtEO0FBQUEsVUFBckNFLE9BQXFDLHVFQUEzQlgsUUFBUXVELEdBQVIsQ0FBWSxJQUFaLEVBQWtCNUMsT0FBUzs7QUFDNUQsYUFBT0EsUUFBUTZDLFdBQVIsQ0FBb0IvQyxXQUFwQixDQUFQO0FBQ0Q7Ozs0QkFFTztBQUNOLGFBQU9ULFFBQVF1RCxHQUFSLENBQVksSUFBWixFQUFrQjVDLE9BQWxCLENBQTBCZ0IsS0FBMUIsRUFBUDtBQUNEOzs7d0JBRUdoQixPLEVBQVM7QUFDWCxVQUFJLEVBQUVBLG1CQUFtQmpCLE9BQXJCLENBQUosRUFBbUM7QUFBRSxjQUFNLElBQUl5QixLQUFKLENBQVUsaUJBQVYsQ0FBTjtBQUFvQztBQUN6RW5CLGNBQVF1RCxHQUFSLENBQVksSUFBWixFQUFrQjVDLE9BQWxCLEdBQTRCQSxPQUE1QjtBQUNEOzs7NkJBRVFnQixLLEVBQU87QUFDZCxVQUFJLEVBQUUsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsaUJBQWlCeUIsTUFBaEQsQ0FBSixFQUE2RDtBQUMzRCxjQUFNLElBQUlqQyxLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNEO0FBQ0QsV0FBS3NDLEdBQUwsQ0FBUyxJQUFJL0QsT0FBSixDQUFZaUMsS0FBWixDQUFUO0FBQ0QiLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2hhclNldCA9IHJlcXVpcmUoJy4vY2hhclNldCcpLmRlZmF1bHRcbmNvbnN0IHsgY2hhclNldDMyIH0gPSByZXF1aXJlKCcuL2NoYXJTZXQnKVxuXG5jb25zdCBDcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxuY29uc3QgV2Vha01hcCA9IHJlcXVpcmUoJ3dlYWstbWFwJylcblxuY29uc3QgcHJvcE1hcCA9IG5ldyBXZWFrTWFwKClcblxuY29uc3QgQklUU19QRVJfQllURSA9IDhcblxuY29uc3QgZW5kaWFuQnl0ZU51bSA9ICgoKSA9PiB7XG4gIGNvbnN0IGJ1ZjMyID0gbmV3IFVpbnQzMkFycmF5KDEpXG4gIGNvbnN0IGJ1ZjggPSBuZXcgVWludDhBcnJheShidWYzMi5idWZmZXIpXG4gIGJ1ZjMyWzBdID0gMHhmZlxuICByZXR1cm4gKGJ1ZjhbMF0gPT09IDB4ZmYpID8gWzIsIDMsIDQsIDUsIDYsIDddIDogWzAsIDEsIDIsIDMsIDYsIDddXG59KSgpXG5cbmNvbnN0IHN0cmluZ1dpdGhCeXRlcyA9IChlbnRyb3B5Qml0cywgYnl0ZXMsIGNoYXJTZXQpID0+IHtcbiAgaWYgKGVudHJvcHlCaXRzIDw9IDApIHsgcmV0dXJuICcnIH1cblxuICBjb25zdCBiaXRzUGVyQ2hhciA9IGNoYXJTZXQuZ2V0Qml0c1BlckNoYXIoKVxuICBjb25zdCBjb3VudCA9IE1hdGguY2VpbChlbnRyb3B5Qml0cyAvIGJpdHNQZXJDaGFyKVxuICBpZiAoY291bnQgPD0gMCkgeyByZXR1cm4gJycgfVxuXG4gIGNvbnN0IG5lZWQgPSBNYXRoLmNlaWwoY291bnQgKiAoYml0c1BlckNoYXIgLyBCSVRTX1BFUl9CWVRFKSlcbiAgaWYgKGJ5dGVzLmxlbmd0aCA8IG5lZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VmZmljaWVudCBieXRlczogbmVlZCAke25lZWR9IGFuZCBnb3QgJHtieXRlcy5sZW5ndGh9YClcbiAgfVxuXG4gIGNvbnN0IGNoYXJzUGVyQ2h1bmsgPSBjaGFyU2V0LmdldENoYXJzUGVyQ2h1bmsoKVxuICBjb25zdCBjaHVua3MgPSBNYXRoLmZsb29yKGNvdW50IC8gY2hhcnNQZXJDaHVuaylcbiAgY29uc3QgcGFydGlhbHMgPSBjb3VudCAlIGNoYXJzUGVyQ2h1bmtcblxuICBjb25zdCBuZHhGbiA9IGNoYXJTZXQuZ2V0TmR4Rm4oKVxuICBjb25zdCBjaGFycyA9IGNoYXJTZXQuZ2V0Q2hhcnMoKVxuXG4gIGxldCBzdHJpbmcgPSAnJ1xuICBmb3IgKGxldCBjaHVuayA9IDA7IGNodW5rIDwgY2h1bmtzOyBjaHVuayArPSAxKSB7XG4gICAgZm9yIChsZXQgc2xpY2UgPSAwOyBzbGljZSA8IGNoYXJzUGVyQ2h1bms7IHNsaWNlICs9IDEpIHtcbiAgICAgIGNvbnN0IG5keCA9IG5keEZuKGNodW5rLCBzbGljZSwgYnl0ZXMpXG4gICAgICBzdHJpbmcgKz0gY2hhcnNbbmR4XVxuICAgIH1cbiAgfVxuICBmb3IgKGxldCBzbGljZSA9IDA7IHNsaWNlIDwgcGFydGlhbHM7IHNsaWNlICs9IDEpIHtcbiAgICBjb25zdCBuZHggPSBuZHhGbihjaHVua3MsIHNsaWNlLCBieXRlcylcbiAgICBzdHJpbmcgKz0gY2hhcnNbbmR4XVxuICB9XG4gIHJldHVybiBzdHJpbmdcbn1cblxuY29uc3QgY3J5cHRvQnl0ZXMgPSBjb3VudCA9PiBCdWZmZXIuZnJvbShDcnlwdG8ucmFuZG9tQnl0ZXMoY291bnQpKVxuXG5jb25zdCByYW5kb21CeXRlcyA9IChjb3VudCkgPT4ge1xuICBjb25zdCBCWVRFU19VU0VEX1BFUl9SQU5ET01fQ0FMTCA9IDZcbiAgY29uc3QgcmFuZENvdW50ID0gTWF0aC5jZWlsKGNvdW50IC8gQllURVNfVVNFRF9QRVJfUkFORE9NX0NBTEwpXG5cbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKGNvdW50KVxuICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoQklUU19QRVJfQllURSkpXG4gIGZvciAobGV0IHJOdW0gPSAwOyByTnVtIDwgcmFuZENvdW50OyByTnVtICs9IDEpIHtcbiAgICBkYXRhVmlldy5zZXRGbG9hdDY0KDAsIE1hdGgucmFuZG9tKCkpXG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBCWVRFU19VU0VEX1BFUl9SQU5ET01fQ0FMTDsgbiArPSAxKSB7XG4gICAgICBjb25zdCBmQnl0ZU51bSA9IGVuZGlhbkJ5dGVOdW1bbl1cbiAgICAgIGNvbnN0IGJCeXRlTnVtID0gKHJOdW0gKiBCWVRFU19VU0VEX1BFUl9SQU5ET01fQ0FMTCkgKyBuXG4gICAgICBpZiAoYkJ5dGVOdW0gPCBjb3VudCkge1xuICAgICAgICBidWZmZXJbYkJ5dGVOdW1dID0gZGF0YVZpZXcuZ2V0VWludDgoZkJ5dGVOdW0pXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihhcmcpIHtcbiAgICBsZXQgY2hhclNldFxuICAgIGlmIChhcmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2hhclNldCA9IGNoYXJTZXQzMlxuICAgIH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgQ2hhclNldCkge1xuICAgICAgY2hhclNldCA9IGFyZ1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IGFyZyBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgIGNoYXJTZXQgPSBuZXcgQ2hhclNldChhcmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmc6IG11c3QgYmUgZWl0aGVyIHZhbGlkIENoYXJTZXQgb3IgdmFsaWQgY2hhcnMnKVxuICAgIH1cbiAgICBjb25zdCBoaWRlUHJvcHMgPSB7XG4gICAgICBjaGFyU2V0XG4gICAgfVxuICAgIHByb3BNYXAuc2V0KHRoaXMsIGhpZGVQcm9wcylcbiAgfVxuXG4gIHNtYWxsSUQoY2hhclNldCA9IHByb3BNYXAuZ2V0KHRoaXMpLmNoYXJTZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmcoMjksIGNoYXJTZXQpXG4gIH1cblxuICBtZWRpdW1JRChjaGFyU2V0ID0gcHJvcE1hcC5nZXQodGhpcykuY2hhclNldCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZyg2OSwgY2hhclNldClcbiAgfVxuXG4gIGxhcmdlSUQoY2hhclNldCA9IHByb3BNYXAuZ2V0KHRoaXMpLmNoYXJTZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmcoOTksIGNoYXJTZXQpXG4gIH1cblxuICBzZXNzaW9uSUQoY2hhclNldCA9IHByb3BNYXAuZ2V0KHRoaXMpLmNoYXJTZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmcoMTI4LCBjaGFyU2V0KVxuICB9XG5cbiAgdG9rZW4oY2hhclNldCA9IHByb3BNYXAuZ2V0KHRoaXMpLmNoYXJTZXQpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmcoMjU2LCBjaGFyU2V0KVxuICB9XG5cbiAgc3RyaW5nKGVudHJvcHlCaXRzLCBjaGFyU2V0ID0gcHJvcE1hcC5nZXQodGhpcykuY2hhclNldCkge1xuICAgIGNvbnN0IGJ5dGVzTmVlZGVkID0gY2hhclNldC5ieXRlc05lZWRlZChlbnRyb3B5Qml0cylcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdXaXRoQnl0ZXMoZW50cm9weUJpdHMsIGNyeXB0b0J5dGVzKGJ5dGVzTmVlZGVkKSwgY2hhclNldClcbiAgfVxuXG4gIHN0cmluZ1JhbmRvbShlbnRyb3B5Qml0cywgY2hhclNldCA9IHByb3BNYXAuZ2V0KHRoaXMpLmNoYXJTZXQpIHtcbiAgICBjb25zdCBieXRlc05lZWRlZCA9IGNoYXJTZXQuYnl0ZXNOZWVkZWQoZW50cm9weUJpdHMpXG4gICAgcmV0dXJuIHRoaXMuc3RyaW5nV2l0aEJ5dGVzKGVudHJvcHlCaXRzLCByYW5kb21CeXRlcyhieXRlc05lZWRlZCksIGNoYXJTZXQpXG4gIH1cblxuICBzdHJpbmdXaXRoQnl0ZXMoZW50cm9weUJpdHMsIGJ5dGVzLCBjaGFyU2V0ID0gcHJvcE1hcC5nZXQodGhpcykuY2hhclNldCkge1xuICAgIHJldHVybiBzdHJpbmdXaXRoQnl0ZXMoZW50cm9weUJpdHMsIGJ5dGVzLCBjaGFyU2V0KVxuICB9XG5cbiAgYnl0ZXNOZWVkZWQoZW50cm9weUJpdHMsIGNoYXJTZXQgPSBwcm9wTWFwLmdldCh0aGlzKS5jaGFyU2V0KSB7XG4gICAgcmV0dXJuIGNoYXJTZXQuYnl0ZXNOZWVkZWQoZW50cm9weUJpdHMpXG4gIH1cblxuICBjaGFycygpIHtcbiAgICByZXR1cm4gcHJvcE1hcC5nZXQodGhpcykuY2hhclNldC5jaGFycygpXG4gIH1cblxuICB1c2UoY2hhclNldCkge1xuICAgIGlmICghKGNoYXJTZXQgaW5zdGFuY2VvZiBDaGFyU2V0KSkgeyB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQ2hhclNldCcpIH1cbiAgICBwcm9wTWFwLmdldCh0aGlzKS5jaGFyU2V0ID0gY2hhclNldFxuICB9XG5cbiAgdXNlQ2hhcnMoY2hhcnMpIHtcbiAgICBpZiAoISh0eXBlb2YgY2hhcnMgPT09ICdzdHJpbmcnIHx8IGNoYXJzIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNoYXJzOiBNdXN0IGJlIHN0cmluZycpXG4gICAgfVxuICAgIHRoaXMudXNlKG5ldyBDaGFyU2V0KGNoYXJzKSlcbiAgfVxufVxuIl19